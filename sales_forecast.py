# -*- coding: utf-8 -*-
"""sales_forecast.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_uAX6kGOlH_BCD3QYbOAm5CzgHTq5USk
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt

store_sales = pd.read_csv("train.csv")
store_sales.head(10)

store_sales.info()

store_sales= store_sales.drop(['store', 'item'], axis=1)

store_sales.info()

store_sales['date'] = pd.to_datetime(store_sales['date'])

store_sales.info()

store_sales['date'] = store_sales['date'].dt.to_period("M")
monthly_sales = store_sales.groupby('date').sum().reset_index()

monthly_sales['date'] = monthly_sales['date'].dt.to_timestamp()

monthly_sales.head(10)

plt.figure(figsize=(15, 5))
plt.plot(monthly_sales['date'], monthly_sales['sales'])
plt.xlabel('Date')
plt.ylabel('Sales')

monthly_sales['sales_diff'] = monthly_sales['sales'].diff()
monthly_sales = monthly_sales.dropna()
monthly_sales.head(10)

plt.figure(figsize=(15, 5))
plt.plot(monthly_sales['date'], monthly_sales['sales'])
plt.xlabel('Date')
plt.ylabel('Sales')

supervised_data = monthly_sales.drop(['date', 'sales'], axis=1)

for i in range(1,13):
  col_name = 'month_'+str(i)
  supervised_data[col_name] = supervised_data['sales_diff'].shift(i)

supervised_data = supervised_data.dropna().reset_index(drop=True)
supervised_data.head(10)

# Splitting data into train and test sets
train_data = supervised_data[:-12]
test_data = supervised_data[-12:]

print("Train data shape: ", train_data.shape)
print("Test data shape: ", test_data.shape)

# Scaling features
scaler = MinMaxScaler(feature_range=(-1, 1))
scaler.fit(train_data)
train_data = scaler.transform(train_data)
test_data = scaler.transform(test_data)

# Splitting data into input and output
x_train, y_train = train_data[:, 1:], train_data[:, 0:1]
x_test, y_test = test_data[:, 1:], test_data[:, 0:1]

y_train = y_train.ravel()
y_test = y_test.ravel()

print("x_train shape: ", x_train.shape)
print("y_train shape: ", y_train.shape)
print("x_test shape: ", x_test.shape)
print("y_test shape: ", y_test.shape)

# Creating a DataFrame to store predictions
sales_dates = monthly_sales['date'][-12:].reset_index(drop=True)
predict_df = pd.DataFrame(sales_dates)

# Actual sales for the last 13 months
actual_sales = monthly_sales['sales'].values[-13:]
print(actual_sales)

# Train the Linear Regression model
lr_model = LinearRegression()
lr_model.fit(x_train, y_train)
lr_predict = lr_model.predict(x_test)

lr_predict = lr_predict.reshape(-1,1)
lr_predict_test_set =np.concatenate([lr_predict,x_test], axis =1)
lr_predict_test_set = scaler.inverse_transform(lr_predict_test_set)

# Calculating predicted sales
result_list = []
for index in range(len(lr_predict_test_set)):
    result_list.append(lr_predict_test_set[index][0] + actual_sales[index])

lr_predict_series = pd.Series(result_list, name='linear_prediction')

# Merging with prediction DataFrame
predict_df = predict_df.merge(lr_predict_series, left_index=True, right_index=True)

# Model Evaluation
lr_mse = np.sqrt(mean_squared_error(predict_df['linear_prediction'], monthly_sales['sales'][-12:]))
lr_mae = mean_absolute_error(predict_df['linear_prediction'], monthly_sales['sales'][-12:])
lr_r2 = r2_score(predict_df['linear_prediction'], monthly_sales['sales'][-12:])

print(f"Linear Regression MSE: {lr_mse}")
print(f"Linear Regression MAE: {lr_mae}")
print(f"Linear Regression R2 Score: {lr_r2}")

# Plotting actual sales vs predicted sales
plt.figure(figsize=(15, 5))
plt.plot(monthly_sales['date'], monthly_sales['sales'])
plt.plot(predict_df['date'], predict_df['linear_prediction'], label='Predicted Sales', linestyle='--')
plt.title('Actual Sales vs Predicted Sales')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.show()

